<?xml version="1.0"?>

<project name="Gmail Check POP" default="jar" basedir=".">

	<!-- Run ‘ant -Ddatadir=mydatadir -Dusername=myusername -Dpasswd_store=gnome’ to customize -->
	<property name="datadir" value="chromium-datadir" />
	<property name="username" value="myusername" />
	<property name="passwd_store" value="gnome" />


	<property name="src.dir" value="src" />
	<property name="lib.dir" value="lib" />
	<property name="build.dir" value="build" />
	<property name="dist.dir" value="dist" />
	<property name="dist.lib" value="${dist.dir}/lib" />

	<!-- JAR file name -->
	<property name="jar.file" value="${dist.dir}/gmail-check-pop.jar" />

	<!-- ClassPath -->
	<path id="classpath">
		<fileset dir="${lib.dir}" includes="**/*.jar" />
	</path>

	<!-- Target to create build directories before compile target -->
	<target name="prepare">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${dist.dir}" />
	</target>

	<!-- Target to clean everything -->
	<target name="clean" description="Remove all generated files.">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
	</target>

	<!-- Target to compile source code -->
	<target name="compile" depends="prepare" description="Compile source code (build project).">
		<javac srcdir="${src.dir}" encoding="UTF-8"
			destdir="${build.dir}" classpathref="classpath"
			includeAntRuntime="false" />
	</target>

	<!-- Target to build the jar -->
	<target name="jar" depends="compile" description="Build the JAR in dist/">
		<!-- copy lib/ to dist/lib -->
		<copy todir="${dist.lib}">
			<fileset dir="${lib.dir}" includes="**/*.jar" />
		</copy>

		<path id="dist.classpath">
			<fileset dir="${dist.lib}" includes="**/*.jar" />
		</path>

		<manifestclasspath property="manifest.classpath" jarfile="${jar.file}">
			<classpath refid="dist.classpath" />
		</manifestclasspath>

		<jar jarfile="${jar.file}">
			<fileset dir="${build.dir}" />
			<manifest>
				<attribute name="Main-Class" value="gmailpop.Main" />
				<attribute name="Class-Path" value="${manifest.classpath}" />
			</manifest>
		</jar>
	</target>

	<!-- Target to clean and then build the jar -->
	<target name="rebuild" depends="clean, jar" description="Cleans, compiles and builds the JAR." />

	<!-- Target to run the jar -->
	<target name="run" depends="jar" description="Run the program from the built JAR.">
		<java jar="${jar.file}" fork="true">
			<arg value="${datadir}" />
			<arg value="${username}" />
			<arg value="${passwd_store}" />
		</java>
	</target>

</project>
